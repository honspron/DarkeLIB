a_trans_shadow.c:void create() {
a_trans_shadow.c:	seteuid(getuid());
a_trans_shadow.c:void set_new_short(string str) { new_short = str; }
a_trans_shadow.c:void set_new_melee(mapping m) { new_melee = m; }
a_trans_shadow.c:void set_atrans_mods(mapping m) { stat_mods = m; }
a_trans_shadow.c:void set_new_cap(string str) { new_cap_name = str; }
a_trans_shadow.c:    seteuid(UID_SHADOW);
a_trans_shadow.c:    seteuid(getuid());
a_trans_shadow.c:void set(string str, mixed val) {
a_trans_shadow.c:void expire_lev(object me) {
ac_shadow.c:void remove_ac(object ob) {
ac_shadow.c:void set_stack_key(string str) { stack_key = str; }
ac_shadow.c:void set_limbs(string *which) {
ac_shadow.c:void set_expire_message(string message) { mesg = message; }
ac_shadow.c:varargs void set_shad_ac(int amt, string type) {
ac_shadow.c:void start_shadow(object ob, int duration) {
ac_shadow.c:    seteuid(UID_SHADOW);
ac_shadow.c:    seteuid(getuid());
auto_heal_shad.c:void check_heal();
auto_heal_shad.c:void check_heal() {
auto_heal_shad.c:void remove_no_heal() {
auto_heal_shad.c:void create() {
auto_heal_shad.c:void set_perc(int x) { perc = x; }
auto_heal_shad.c:void set_pow(int x) { power = x; }
auto_heal_shad.c:void start_shadow(object who, int dur, string mesg) {
auto_heal_shad.c:  seteuid(UID_SHADOW);
auto_heal_shad.c:  seteuid(getuid());
auto_heal_shad.c:void heal(int x) {
auto_heal_shad.c:void add_hp(int x) {
aware_shad.c:void create() {
aware_shad.c:        seteuid(getuid());
aware_shad.c:void set_power(int x) { pow = x; }
aware_shad.c:    seteuid(UID_SHADOW);
aware_shad.c:    seteuid(getuid());
aware_shad.c:void expire_me(object what) {
battle_shadow.c:void set_level(int x) { lev = x; }
battle_shadow.c:void start_shadow(object who, int dur, string mesg) {
battle_shadow.c:  seteuid(UID_SHADOW);
battle_shadow.c:  seteuid(getuid());
battle_shadow.c:void expire_just(object me) {
blind_shadow.c:void create() {
blind_shadow.c:	seteuid(getuid());
blind_shadow.c:    seteuid(UID_SHADOW);
blind_shadow.c:    seteuid(getuid());
blind_shadow.c:void revive() {
blur_shadow.c:void set_penalty(int x) { penalty = x; }
blur_shadow.c:void start_shadow(object who, int dur, string mesg) {
blur_shadow.c:  seteuid(UID_SHADOW);
blur_shadow.c:  seteuid(getuid());
blur_shadow.c:void expire_blur(object me) {
cont_damage.c:void remove();
cont_damage.c:void create() {
cont_damage.c:  seteuid(UID_LOG);
cont_damage.c:  seteuid(getuid());
cont_damage.c:void set_duration(int heartbeats) { duration = heartbeats; }
cont_damage.c:void set_dmg(int dmg) { dmg_per_heartbeat = dmg; }
cont_damage.c:void set_message(string message) { mesg = message; }
cont_damage.c:void damage_victim() {
cont_damage.c:/* Patched to not be limb specific...avoids limbs spontaneously popping off
cont_damage.c:void remove() {
curse_shadow.c:void create() {
curse_shadow.c:	seteuid(getuid());
curse_shadow.c:    seteuid(UID_SHADOW);
curse_shadow.c:    seteuid(getuid());
curse_shadow.c:void set_curse(int x) { curse = x; }
curse_shadow.c:void expire_me(object what) {
d_trans_shadow.c:void create() {
d_trans_shadow.c:	seteuid(getuid());
d_trans_shadow.c:void set_power(int x) { pow = x; }
d_trans_shadow.c:    seteuid(UID_SHADOW);
d_trans_shadow.c:    seteuid(getuid());
d_trans_shadow.c:void expire_me(object what) {
demon_shadow.c:void create() {
demon_shadow.c:	seteuid(getuid());
demon_shadow.c:    seteuid(UID_SHADOW);
demon_shadow.c:    seteuid(getuid());
demon_shadow.c:void set_demon(int x) { demon = x; }
demon_shadow.c:void expire_me(object what) {
disguise_shad.c:void set_new_short(string news) { new_short = news; }
disguise_shad.c:void set_new_cap_name(string news) { new_cap_name = news; }
disguise_shad.c:void set_my_skill(int x) { 
disguise_shad.c:void start_shadow(object who) {
disguise_shad.c:  seteuid(UID_SHADOW);
disguise_shad.c:  seteuid(getuid());
disguise_shad.c:void external_destruct(object ob) {
dvision_shadow.c:void set_max(int x) { max = x; }
dvision_shadow.c:void start_shadow(object who, int dur, string mesg) {
dvision_shadow.c:  seteuid(UID_SHADOW);
dvision_shadow.c:  seteuid(getuid());
dvision_shadow.c:void expire_vision(object me) {
e_trans_shadow.c:void create() {
e_trans_shadow.c:	seteuid(getuid());
e_trans_shadow.c:void set_melee(int x) { melee = x; }
e_trans_shadow.c:void set_elements(string *ele) { elements = ele; }
e_trans_shadow.c:void set_melee_skill(int x) { mskill = x; }
e_trans_shadow.c:    seteuid(UID_SHADOW);
e_trans_shadow.c:    seteuid(getuid());
e_trans_shadow.c:void expire_me(object what) {
ele_pres_shad.c:void set_level(int x) { lev = x; }
ele_pres_shad.c:void set_damage(string *p) { dmg = p; }
ele_pres_shad.c:void start_shadow(object who, int dur, string mesg) {
ele_pres_shad.c:  seteuid(UID_SHADOW);
ele_pres_shad.c:  seteuid(getuid());
ele_pres_shad.c:void expire_just(object me) {
ele_shadow.c:void set_element(string str) { element = str; }
ele_shadow.c:void start_shadow(object who) {
ele_shadow.c:  seteuid(UID_SHADOW);
ele_shadow.c:  seteuid(getuid());
ele_wall.c:void create() {
ele_wall.c:  set_id(({ "wall", "elemental wall" }));
ele_wall.c:void set_ele_name(string name) {
ele_wall.c:  set_id(({ "wall", "elemental wall", name+" wall",
ele_wall.c:void set_elements(string *p_str) { elems = p_str; }
elemental_wall.c:void create() {
elemental_wall.c:void info() {
elemental_wall.c:void spell_func(object caster, object at, int power, string args, int flag) {
ff_shadow.c:void create() {
ff_shadow.c:	seteuid(getuid());
ff_shadow.c:    seteuid(UID_SHADOW);
ff_shadow.c:    seteuid(getuid());
ff_shadow.c:void set_light(int x) { light = x; }
ff_shadow.c:void expire_lite(object me) {
fire_shadow.c:void set_level(int x) { lev = x; }
fire_shadow.c:void start_shadow(object who, int dur, string mesg) {
fire_shadow.c:  seteuid(UID_SHADOW);
fire_shadow.c:  seteuid(getuid());
fire_shadow.c:void expire_just(object me) {
h_awar_shad.c:void create() {
h_awar_shad.c:        seteuid(getuid());
h_awar_shad.c:void set_power(int x) { pow = x; }
h_awar_shad.c:    seteuid(UID_SHADOW);
h_awar_shad.c:    seteuid(getuid());
h_awar_shad.c:void expire_me(object what) {
h_awar_shad.c~:void create() {
h_awar_shad.c~:        seteuid(getuid());
h_awar_shad.c~:void set_power(int x) { pow = x; }
h_awar_shad.c~:    seteuid(UID_SHADOW);
h_awar_shad.c~:    seteuid(getuid());
h_awar_shad.c~:void expire_me(object what) {
haste_shadow.c:void set_fumble() { fumble = 1; }
haste_shadow.c:void start_shadow(object who, int dur, string mesg) {
haste_shadow.c:  seteuid(UID_SHADOW);
haste_shadow.c:  seteuid(getuid());
haste_shadow.c:void expire_haste(object me) {
hide_shadow.c:void start_shadow(object who) {
hide_shadow.c:  seteuid(UID_SHADOW);
hide_shadow.c:  seteuid(getuid());
hide_shadow.c:int query_hiding() {
hide_shadow.c:  res = (int)next_shadow()->query_hiding();
hide_shadow.c:  return res + (int)who_shadowed->query_skill("hide in shadows");
hide_shadow.c:    " is hiding in the shadows.";
hide_shadow.c:void external_destruct(object ob) {
hide_shadow.c:  if(who_shadowed) who_shadowed->set("hide shad", 0);
hide_shadow.c:void kill_ob(object who, int flag) {
holy_shadow.c:void set_level(int x) { lev = x; }
holy_shadow.c:void start_shadow(object who, int dur, string mesg) {
holy_shadow.c:  seteuid(UID_SHADOW);
holy_shadow.c:  seteuid(getuid());
holy_shadow.c:void expire_just(object me) {
hp_shadow.c:void create() {
hp_shadow.c:	seteuid(getuid());
hp_shadow.c:void set_max_hp(int arg) { mod2 = arg; }
hp_shadow.c:void set_mod(int arg) { mod = arg; }
hp_shadow.c:    seteuid(UID_SHADOW);
hp_shadow.c:    seteuid(getuid());
hp_shadow.c:void remove() {
imp_invis_shadow.c:void start_shadow(object who, int dur, string mesg) {
imp_invis_shadow.c:  seteuid(UID_SHADOW);
imp_invis_shadow.c:  seteuid(getuid());
imp_invis_shadow.c:void expire_invis(object me) {
impact_shad.c:void set_level(int x) { lev = x; }
impact_shad.c:void start_shadow(object who, int dur, string mesg) {
impact_shad.c:  seteuid(UID_SHADOW);
impact_shad.c:  seteuid(getuid());
impact_shad.c:void expire_just(object me) {
invis_shadow.c:void start_shadow(object who, int dur, string mesg) {
invis_shadow.c:  seteuid(UID_SHADOW);
invis_shadow.c:  seteuid(getuid());
invis_shadow.c:void expire_invis(object me) {
invis_shadow.c:void kill_ob(object who, int flag) {
justice_shad.c:void set_fumble(int stat) { f_flag = stat; }
justice_shad.c:void create() {
justice_shad.c:void start_shadow(object who, int dur, string mesg) {
justice_shad.c:  seteuid(UID_SHADOW);
justice_shad.c:  seteuid(getuid());
justice_shad.c:void heal(int x) {
justice_shad.c:void add_hp(int x) {
justice_shad.c:void expire_just(object me) {
lev_shadow.c:void create() {
lev_shadow.c:	seteuid(getuid());
lev_shadow.c:    seteuid(UID_SHADOW);
lev_shadow.c:    seteuid(getuid());
lev_shadow.c:void expire_lev(object me) {
lichform_shadow.c:void create() {
lichform_shadow.c:	seteuid(getuid());
lichform_shadow.c:void set_power(int x) { pow = x; }
lichform_shadow.c:    seteuid(UID_SHADOW);
lichform_shadow.c:    seteuid(getuid());
lichform_shadow.c:void expire_me(object what) {
light_shad.c:void create() {
light_shad.c:	seteuid(getuid());
light_shad.c:void set_light(int x) { light = x; }
light_shad.c:    seteuid(UID_SHADOW);
light_shad.c:    seteuid(getuid());
light_shad.c:void expire_lite(object me) {
luck_shadow.c:void create() {
luck_shadow.c:	seteuid(getuid());
luck_shadow.c:    seteuid(UID_SHADOW);
luck_shadow.c:    seteuid(getuid());
luck_shadow.c:void set_luck(int x) { luck = x; }
luck_shadow.c:void expire_me(object what) {
luck_shadow2.c:void create() {
luck_shadow2.c:	seteuid(getuid());
luck_shadow2.c:    seteuid(UID_SHADOW);
luck_shadow2.c:    seteuid(getuid());
luck_shadow2.c:void set_luck(int x) { luck = x; }
luck_shadow2.c:void expire_me(object what) {
lyc_shadow.c:void create() {
lyc_shadow.c:	seteuid(getuid());
lyc_shadow.c:void set_mod(string stat, int mod) {
lyc_shadow.c:    seteuid(UID_SHADOW);
lyc_shadow.c:    seteuid(getuid());
mag_stealth_shadow.c:int hide_skill;
mag_stealth_shadow.c:void set_my_skill(int x) { stealth_skill = x; }
mag_stealth_shadow.c:void set_hide_skill(int x) { hide_skill = x; }
mag_stealth_shadow.c:void create() {
mag_stealth_shadow.c:  hide_skill = 0;
mag_stealth_shadow.c:void start_shadow(object who, int dur, string mesg) {
mag_stealth_shadow.c:  seteuid(UID_SHADOW);
mag_stealth_shadow.c:  seteuid(getuid());
mag_stealth_shadow.c:void expire_me(object me) {
mag_stealth_shadow.c:int query_hiding() {
mag_stealth_shadow.c:  res = (int)next_shadow()->query_hiding();
mag_stealth_shadow.c:  if(hide_skill) return res + hide_skill;
max_hp_shadow.c:void set_message(string str);
max_hp_shadow.c:void create() {
max_hp_shadow.c:void start_shadow(object who, int mod, mixed duration) {
max_hp_shadow.c:void remove() {
max_hp_shadow.c:void set_message(string str) {
metabolism_shad.c:void set_met_rate(int x) { met_rate = x; }
metabolism_shad.c:void create() {
metabolism_shad.c:void start_shadow(object who, int dur, string mesg) {
metabolism_shad.c:  seteuid(UID_SHADOW);
metabolism_shad.c:  seteuid(getuid());
metabolism_shad.c:void heart_beat() {
metabolism_shad.c:void expire_met(object me) {
mission_shad.c:#define DAMAGE_STR ({ "no", "slight", "little", "moderate", "considerable", \
mission_shad.c:void set_fumble(int stat) { f_flag = stat; }
mission_shad.c:void set_mission_ob(object ob) { mission_ob = ob; }
mission_shad.c:void create() {
mission_shad.c:void start_shadow(object who, int dur, string mesg) {
mission_shad.c:  seteuid(UID_SHADOW);
mission_shad.c:  seteuid(getuid());
mission_shad.c:void warn_expire(object me, int to_go) {
mission_shad.c:  int idx;
mission_shad.c:  if((int)who_shadowed->query_max_hp() <= 0) idx = 7;
mission_shad.c:    idx = 7*damage / (int)who_shadowed->query_max_hp();
mission_shad.c:  if(idx < 0) idx = 0;
mission_shad.c:  else if(idx > 7) idx = 7;
mission_shad.c:		  to_go/60, to_go%60, "%^RESET%^", DAMAGE_STR[idx]), 
mission_shad.c:void heal(int x) {
mission_shad.c:void add_hp(int x) {
mission_shad.c:void expire_mission(object me) {
move_shadow.c:void set_move_func(function func) {
move_shadow.c:void set_move_arg(mixed arg) {
move_shadow.c:void start_shadow(object ob) {
move_shadow.c:  seteuid(UID_SHADOW);
move_shadow.c:  seteuid(getuid());
room_no_enter.c:void set_receive_func(function func) { receive_func = func; }
room_no_enter.c:void set_no_stack(int stat) { no_stack = stat; }
room_no_enter.c:void create() {
room_no_enter.c:void start_shadow(object who, int dur, string mesg) {
room_no_enter.c:  seteuid(UID_SHADOW);
room_no_enter.c:  seteuid(getuid());
room_no_enter.c:void expire_sanc(object me) {
s_grasp_shadow.c:void create() {
s_grasp_shadow.c:	seteuid(getuid());
s_grasp_shadow.c:void set_power(int x) { pow = x; }
s_grasp_shadow.c:    seteuid(UID_SHADOW);
s_grasp_shadow.c:    seteuid(getuid());
s_grasp_shadow.c:void expire_me(object what) {
shadow.c:void external_destruct(object who) {
shadow_shadow.c:void start_shadow(object who, int dur, string mesg) {
shadow_shadow.c:  seteuid(UID_SHADOW);
shadow_shadow.c:  seteuid(getuid());
shadow_shadow.c:void expire_haste(object me) {
shadow_shadow.c:void set_shadow_ob(object ob) { shadow_ob = ob; }
skill_shadow.c:void start_shadow(object who, int dur, string mesg) {
skill_shadow.c:  seteuid(UID_SHADOW);
skill_shadow.c:  seteuid(getuid());
skill_shadow.c:void create() {
skill_shadow.c:void add_skill(string skill, int lev) {
skill_shadow.c:void add_spell(string spell, int lev) {
skill_shadow.c:void add_new_skill_bonus(string skill, int bonus) {
skill_shadow.c:void add_spell_bonus(string spell, int bonus) {
skill_shadow.c:void expire_skill(object me) {
slow_shadow.c:void start_shadow(object who, int dur, string mesg) {
slow_shadow.c:  seteuid(UID_SHADOW);
slow_shadow.c:  seteuid(getuid());
slow_shadow.c:void expire_haste(object me) {
slow_shadow.c:void set_slow_ob(object ob) { shadow_ob = ob; }
stat_shadow.c:void create() {
stat_shadow.c:	seteuid(getuid());
stat_shadow.c:void set_stat(string arg) { stat = arg; }
stat_shadow.c:void set_mod(int arg) { mod = arg; }
stat_shadow.c:    seteuid(UID_SHADOW);
stat_shadow.c:    seteuid(getuid());
stat_shadow.c:void remove() {
stealth_shadow.c:string hide_skill;
stealth_shadow.c:void set_my_skill(string str) { stealth_skill = str; }
stealth_shadow.c:void set_hide_skill(string str) { hide_skill = str; }
stealth_shadow.c:void create() {
stealth_shadow.c:  hide_skill = 0;
stealth_shadow.c:void start_shadow(object who) {
stealth_shadow.c:  seteuid(UID_SHADOW);
stealth_shadow.c:  seteuid(getuid());
stealth_shadow.c:int query_hiding() {
stealth_shadow.c:  res = (int)next_shadow()->query_hiding();
stealth_shadow.c:  if(hide_skill) return res + (int)who_shadowed->query_skill(hide_skill);
stealth_shadow.c:void kill_ob(object who, int flag) {
vampiric_shadow.c:int sides;
vampiric_shadow.c:void set_dice(int x) { dice = x; }
vampiric_shadow.c:void set_sides(int x) { sides = x; }
vampiric_shadow.c:  for(i=1; i<=dice; i++) res += 1+random(sides);
vampiric_shadow.c:varargs void start_shadow(object what, int dur, string mesg) {
vampiric_shadow.c:  seteuid(UID_SHADOW);
vampiric_shadow.c:  seteuid(getuid());
vampiric_shadow.c:void expire_weap(object me) {
w_shield_shad.c:void set_level(int x) { lev = x; }
w_shield_shad.c:void start_shadow(object who, int dur, string mesg) 
w_shield_shad.c:  seteuid(UID_SHADOW);
w_shield_shad.c:  seteuid(getuid());
w_shield_shad.c:void expire_just(object me) 
weapon_shadow.c:void set_stack_key(string str) {
weapon_shadow.c:void set_enh_critical(int x) { extra_crit = x; }
weapon_shadow.c:void set_enchantment(int x) { extra_enchant = x; }
weapon_shadow.c:void set_hit_bonus(int x) { hit_bonus = x; }
weapon_shadow.c:void set_extra_wc(mapping wc) { extra_wc = wc; }
weapon_shadow.c:void add_wc(string type, int amt) {
weapon_shadow.c:void remove_wc(string type) { map_delete(extra_wc, type); }
weapon_shadow.c:void set_auto_crits(mapping ac) { auto_crits = ac; }
weapon_shadow.c:void add_auto_crit(string crit, int chance) {
weapon_shadow.c:void remove_auto_crit(string crit) { map_delete(auto_crits, crit); }
weapon_shadow.c:varargs void start_shadow(object what, int dur, string mesg) {
weapon_shadow.c:  seteuid(UID_SHADOW);
weapon_shadow.c:  seteuid(getuid());
weapon_shadow.c:void expire_weap(object me) {
whirlwind_shad.c:void start_shadow(object who, int skill) {
whirlwind_shad.c:  seteuid(UID_SHADOW);
whirlwind_shad.c:  seteuid(getuid());
whirlwind_shad.c:void end_skill(object me) {
woodland_shadow.c:void start_shadow(object who) {
woodland_shadow.c:  seteuid(UID_SHADOW);
woodland_shadow.c:  seteuid(getuid());
woodland_shadow.c:int query_hiding() {
woodland_shadow.c:void kill_ob(object who, int flag) {
