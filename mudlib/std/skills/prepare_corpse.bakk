#include "/adm/include/move.h"

inherit "/std/skills/skill.c";

void create() {
    ::create();
    set_stat("intelligence");
    set_dev_cost(9);
    set_fast_dev_cost(26);
    set_property("target type", "any");
    set_property("must be present", 1);
}

void info() {
    message("help",
      "This skill is used to prepare corpses for summoning undead.  "
      "You must prepare a corpse of equal or greater level that the "
      "spell you wish to summon.  A higher skill level lets you "
      "prepare the corpse more quickly.\n"
      "Example: use prepare corpse at corpse 1\n",
      this_player());
}

void skill_func(object from, object at, string arg) {
    if(!at->id("corpse")) {
	message("info", "You must use this skill at a corpse.",
	  from);
	remove();
	return;
    }
    if(at->id("embalmed corpse")) {
	message("info", "That corpse is already embalmed.",
	  from);
	remove();
	return;
    }
    message("info", "%^CYAN%^You begin embalming a corpse.",
      from);
    message("info", "%^CYAN%^"+(string)from->query_cap_name() +
      " begins embalming a corpse.", environment(from),
      ({ from }));
    if(props["skill level"] > 125) props["skill level"] = 125;
    call_out("do_embalm", 130-props["skill level"], from, at);
    return;
}

void do_embalm(object from, object at) {
    object ob;

    seteuid(getuid());
    if(!at){
       message("info", "The corpse decayed before you were finished.", from);
       remove();
       return;
    }
    if(from)
	message("info", "%^CYAN%^You have finished embalming the corpse.%^RESET%^\n"+
	  "It is sufficient to cast a level "+(int)at->query_level()+
	  " summon undead spell.", from);
    message("info", "%^CYAN%^"+(string)from->query_cap_name() +
      " finishes embalming a corpse.", environment(from),
      ({ from }));
    ob = new("/wizards/diewarzau/obj/misc/emb_corpse");
    ob->set_level((int)at->query_level());
    at->remove();
    if((int)ob->move(from) != MOVE_OK) {
	message("info", "Unable to carry the corpse, you drop it.",
	  from);
	message("info", (string)from->query_cap_name() +
	  " drops the embalmed corpse on the ground.", environment(from),
	  ({ from }));
	ob->move(environment(from));
    }
    remove();
    return;
}

